// automatically generated by the FlatBuffers compiler, do not modify



pub enum TestComponentOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct TestComponent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}
impl<'a> flatbuffers::generics::Table<'a, TestComponent<'a>> for TestComponent<'a> { fn table(&self, ) -> &flatbuffers::Table<'a> { &self._tab }fn from_table(table: flatbuffers::Table<'a>) -> Self { TestComponent::init_from_table(table).clone() }}

impl<'a> flatbuffers::Follow<'a> for TestComponent<'a> {
    type Inner = TestComponent<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> TestComponent<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        TestComponent {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args TestComponentArgs<'args>) -> flatbuffers::WIPOffset<TestComponent<'bldr>> {
      let mut builder = TestComponentBuilder::new(_fbb);
      if let Some(x) = args.name { builder.add_name(x); }
      if let Some(x) = args.base { builder.add_base(x); }
      builder.add_damage(args.damage);
      builder.finish()
    }

    pub const VT_BASE: flatbuffers::VOffsetT = 4;
    pub const VT_NAME: flatbuffers::VOffsetT = 6;
    pub const VT_DAMAGE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn base(&self) -> Option<dist::BaseComponent<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<dist::BaseComponent<'a>>>(TestComponent::VT_BASE, None)
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TestComponent::VT_NAME, None)
  }
  #[inline]
  pub fn damage(&self) -> i16 {
    self._tab.get::<i16>(TestComponent::VT_DAMAGE, Some(0)).unwrap()
  }
}

pub struct TestComponentArgs<'a> {
    pub base: Option<flatbuffers::WIPOffset<dist::BaseComponent<'a >>>,
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub damage: i16,
}
impl<'a> Default for TestComponentArgs<'a> {
    #[inline]
    fn default() -> Self {
        TestComponentArgs {
            base: None,
            name: None,
            damage: 0,
        }
    }
}
pub struct TestComponentBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> TestComponentBuilder<'a, 'b> {
  #[inline]
  pub fn add_base(&mut self, base: flatbuffers::WIPOffset<dist::BaseComponent<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<dist::BaseComponent>>(TestComponent::VT_BASE, base);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TestComponent::VT_NAME, name);
  }
  #[inline]
  pub fn add_damage(&mut self, damage: i16) {
    self.fbb_.push_slot::<i16>(TestComponent::VT_DAMAGE, damage, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TestComponentBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TestComponentBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TestComponent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_test_component<'a>(buf: &'a [u8]) -> TestComponent<'a> {
  flatbuffers::get_root::<TestComponent<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_test_component<'a>(buf: &'a [u8]) -> TestComponent<'a> {
  flatbuffers::get_size_prefixed_root::<TestComponent<'a>>(buf)
}

pub const TEST_COMPONENT_EXTENSION: &'static str = "bfbs";

#[inline]
pub fn finish_test_component_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<TestComponent<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_test_component_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<TestComponent<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
